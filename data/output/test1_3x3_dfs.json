{
    "puzzle_name": "Test1 3x3 Puzzle",
    "size": 3,
    "initial_state": [
        4,
        1,
        3,
        7,
        2,
        5,
        0,
        8,
        6
    ],
    "goal_state": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        0
    ],
    "algorithm": "dfs",
    "heuristic": null,
    "status": "Path found",
    "solution_path": [
        "R",
        "R",
        "U",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "D",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "D",
        "R",
        "R",
        "U",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "D",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "D",
        "R",
        "R",
        "U",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "D",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "D",
        "R",
        "R",
        "U",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "D",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "D",
        "R",
        "R",
        "U",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "D",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "D",
        "R",
        "R",
        "U",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "D",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "D",
        "R",
        "R",
        "U",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "L",
        "L",
        "U",
        "R",
        "R",
        "D",
        "D"
    ],
    "solution_length": 292,
    "time_taken": 0.002943,
    "space_used": 533,
    "nodes_expanded": 298
}